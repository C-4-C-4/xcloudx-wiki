name: Deploy VitePress site to Pages

on:
  push:
    branches: [master]
  workflow_dispatch:  # 添加手动触发选项

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 缓存优化组合
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.12
          
      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml  # 精确依赖文件

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Install dependencies
        run: pnpm install --frozen-lockfile  # 锁定依赖版本

      - name: Build with VitePress
        run: |
          pnpm run docs:build
          touch .vitepress/dist/.nojekyll  # 修复.nojekyll位置

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: .vitepress/dist

  security-scan:  # 可选安全扫描
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          ignore-unfixed: true
          format: table
          exit-code: 0  # 即使发现问题也不中断流程
          severity: HIGH,CRITICAL
          scan-ref: .vitepress/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Verify deployment
        run: |
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deployment.outputs.page_url }})
          if [ $STATUS_CODE -ne 200 ]; then
            echo "Deployment verification failed (HTTP $STATUS_CODE)"
            exit 1
          fi

  notify:  # 失败通知机制
    needs: [build, deploy]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        uses: actions/scripts@v5
        with:
          script: |
            # 这里可以添加Slack/Email通知逻辑
            echo "Workflow failed! Please check $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
